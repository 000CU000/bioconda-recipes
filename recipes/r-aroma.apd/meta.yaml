{% set posix = 'm2-' if win else '' %}
{% set native = 'm2w64-' if win else '' %}

package:
  name: r-aroma.apd
  # Note that conda versions cannot contain -, so any -'s in the version have
  # been replaced with _'s.
  version: "0.6.0"

source:
  fn: aroma.apd_0.6.0.tar.gz
  url:
    - http://cran.r-project.org/src/contrib/aroma.apd_0.6.0.tar.gz
    - http://cran.r-project.org/src/contrib/Archive/aroma.apd/aroma.apd_0.6.0.tar.gz


  # You can add a hash for the file here, like md5 or sha1
  # md5: 49448ba4863157652311cc5ea4fea3ea
  # sha1: 3bcfbee008276084cbb37a2b453963c61176a322
  # patches:
   # List any patch files here
   # - fix.patch

build:
  # If this is a new build for the same version, increment the build
  # number. If you do not include this key, it defaults to 0.
  # number: 1

  # This is required to make R link correctly on Linux.
  rpaths:
    - lib/R/lib/
    - lib/

# Suggests: affxparser
requirements:
  build:
    - r-base
    - r-r.huge >=0.9.0
    - r-r.methodss3 >=1.7.0
    - r-r.oo >=1.18.0
    - r-r.utils >=1.34.0

  run:
    - r-base
    - r-r.huge >=0.9.0
    - r-r.methodss3 >=1.7.0
    - r-r.oo >=1.18.0
    - r-r.utils >=1.34.0

test:
  commands:
    # You can put additional test commands to be run here.
    - $R -e "library('aroma.apd')" # [not win]
    - "\"%R%\" -e \"library('aroma.apd')\"" # [win]

  # You can also put a file called run_test.py, run_test.sh, or run_test.bat
  # in the recipe that will be run at test time.

  # requires:
    # Put any additional test requirements here.

about:
  home: 'URL: http://www.aroma-project.org/, https://github.com/HenrikBengtsson/aroma.apd'

  license: LGPL (>= 2.1)
  summary: DEPRECATED. Do not start building new projects based on this package. (The (in-house)
    APD file format was initially developed to store Affymetrix probe-level data, e.g.
    normalized CEL intensities.  Chip types can be added to APD file and similar to
    methods in the affxparser package, this package provides methods to read APDs organized
    by units (probesets).  In addition, the probe elements can be arranged optimally
    such that the elements are guaranteed to be read in order when, for instance, data
    is read unit by unit.  This speeds up the read substantially.  This package is supporting
    the Aroma framework and should not be used elsewhere.)
  license_family: LGPL

# The original CRAN metadata for this package was:

# Package: aroma.apd
# Version: 0.6.0
# Depends: R (>= 3.0.0)
# Imports: R.methodsS3 (>= 1.7.0), R.oo (>= 1.18.0), R.utils (>= 1.34.0), R.huge (>= 0.9.0)
# Suggests: affxparser
# SuggestsNote: Recommended: affxparser
# Date: 2015-02-24
# Title: A Probe-Level Data File Format Used by 'aroma.affymetrix' [deprecated]
# Authors@R: c(person("Henrik", "Bengtsson", role=c("aut", "cre", "cph"), email = "henrikb@braju.com"))
# Description: DEPRECATED. Do not start building new projects based on this package. (The (in-house) APD file format was initially developed to store Affymetrix probe-level data, e.g. normalized CEL intensities.  Chip types can be added to APD file and similar to methods in the affxparser package, this package provides methods to read APDs organized by units (probesets).  In addition, the probe elements can be arranged optimally such that the elements are guaranteed to be read in order when, for instance, data is read unit by unit.  This speeds up the read substantially.  This package is supporting the Aroma framework and should not be used elsewhere.)
# License: LGPL (>= 2.1)
# URL: URL: http://www.aroma-project.org/, https://github.com/HenrikBengtsson/aroma.apd
# BugReports: https://github.com/HenrikBengtsson/aroma.apd/issues
# LazyLoad: TRUE
# biocViews: Microarray, DataImport
# NeedsCompilation: no
# Packaged: 2015-02-24 20:49:56 UTC; hb
# Author: Henrik Bengtsson [aut, cre, cph]
# Maintainer: Henrik Bengtsson <henrikb@braju.com>
# Repository: CRAN
# Date/Publication: 2015-02-25 00:49:33

# See
# http://docs.continuum.io/conda/build.html for
# more information about meta.yaml
