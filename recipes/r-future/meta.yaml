{% set posix = 'm2-' if win else '' %}
{% set native = 'm2w64-' if win else '' %}

package:
  name: r-future
  # Note that conda versions cannot contain -, so any -'s in the version have
  # been replaced with _'s.
  version: "1.2.0"

source:
  fn: future_1.2.0.tar.gz
  url:
    - http://cran.r-project.org/src/contrib/future_1.2.0.tar.gz
    - http://cran.r-project.org/src/contrib/Archive/future/future_1.2.0.tar.gz


  # You can add a hash for the file here, like md5 or sha1
  # md5: 49448ba4863157652311cc5ea4fea3ea
  # sha1: 3bcfbee008276084cbb37a2b453963c61176a322
  # patches:
   # List any patch files here
   # - fix.patch

build:
  # If this is a new build for the same version, increment the build
  # number. If you do not include this key, it defaults to 0.
  # number: 1

  # This is required to make R link correctly on Linux.
  rpaths:
    - lib/R/lib/
    - lib/

# Suggests: R.rsp, markdown
requirements:
  build:
    - r
    - r-digest
    - r-globals >=0.7.1
    - r-listenv >=0.6.0

  run:
    - r
    - r-digest
    - r-globals >=0.7.1
    - r-listenv >=0.6.0

test:
  commands:
    # You can put additional test commands to be run here.
    - $R -e "library('future')" # [not win]
    - "\"%R%\" -e \"library('future')\"" # [win]

  # You can also put a file called run_test.py, run_test.sh, or run_test.bat
  # in the recipe that will be run at test time.

  # requires:
    # Put any additional test requirements here.

about:
  home: https://github.com/HenrikBengtsson/future
  license: LGPL (>= 2.1)
  summary: A Future API for R is provided. In programming, a future is an abstraction for a value
    that may be available at some point in the future. The state of a future can either
    be unresolved or resolved. As soon as it is resolved, the value is available. Futures
    are useful constructs in for instance concurrent evaluation, e.g. parallel processing
    and distributed processing on compute clusters. The purpose of this package is to
    provide a lightweight interface for using futures in R. Functions 'future()' and
    'value()' exist for creating futures and requesting their values, e.g. 'f <- future({
    mandelbrot(-0.75, 0, side=3) })' and 'v <- value(f)'. The 'resolved()' function
    can be used to check if a future is resolved or not. An infix assignment operator
    '%<-%' exists for creating futures whose values are accessible by the assigned variables
    (as promises), e.g. 'v %<-% { mandelbrot(-0.75, 0, side=3) }'. This package implements
    synchronous "lazy" and "eager" futures, and asynchronous "multicore", "multisession"
    and ad hoc "cluster" futures. Globals variables and functions are automatically
    identified and exported. Required packages are attached in external R sessions whenever
    needed. All types of futures are designed to behave the same such that the exact
    same code work regardless of futures used or number of cores, background sessions
    or cluster nodes available. Additional types of futures are provided by other packages
    enhancing this package.
  license_family: LGPL

# The original CRAN metadata for this package was:

# Package: future
# Version: 1.2.0
# Title: A Future API for R
# Imports: digest, globals (>= 0.7.1), listenv (>= 0.6.0), parallel, utils
# Suggests: R.rsp, markdown
# VignetteBuilder: R.rsp
# Authors@R: c(person("Henrik", "Bengtsson", role=c("aut", "cre", "cph"), email = "henrikb@braju.com"))
# Description: A Future API for R is provided. In programming, a future is an abstraction for a value that may be available at some point in the future. The state of a future can either be unresolved or resolved. As soon as it is resolved, the value is available. Futures are useful constructs in for instance concurrent evaluation, e.g. parallel processing and distributed processing on compute clusters. The purpose of this package is to provide a lightweight interface for using futures in R. Functions 'future()' and 'value()' exist for creating futures and requesting their values, e.g. 'f <- future({ mandelbrot(-0.75, 0, side=3) })' and 'v <- value(f)'. The 'resolved()' function can be used to check if a future is resolved or not. An infix assignment operator '%<-%' exists for creating futures whose values are accessible by the assigned variables (as promises), e.g. 'v %<-% { mandelbrot(-0.75, 0, side=3) }'. This package implements synchronous "lazy" and "eager" futures, and asynchronous "multicore", "multisession" and ad hoc "cluster" futures. Globals variables and functions are automatically identified and exported. Required packages are attached in external R sessions whenever needed. All types of futures are designed to behave the same such that the exact same code work regardless of futures used or number of cores, background sessions or cluster nodes available. Additional types of futures are provided by other packages enhancing this package.
# License: LGPL (>= 2.1)
# LazyLoad: TRUE
# URL: https://github.com/HenrikBengtsson/future
# BugReports: https://github.com/HenrikBengtsson/future/issues
# RoxygenNote: 5.0.1
# NeedsCompilation: no
# Packaged: 2016-11-12 10:38:34 UTC; hb
# Author: Henrik Bengtsson [aut, cre, cph]
# Maintainer: Henrik Bengtsson <henrikb@braju.com>
# Repository: CRAN
# Date/Publication: 2016-11-12 14:02:40

# See
# http://docs.continuum.io/conda/build.html for
# more information about meta.yaml
