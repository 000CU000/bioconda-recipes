--- scripts/maf-convert	(original)
+++ scripts/maf-convert	(refactored)
@@ -10,7 +10,7 @@
 import math, optparse, os, signal, sys
 
 def maxlen(s):
-    return max(map(len, s))
+    return max(list(map(len, s)))
 
 def pairOrDie(sLines, formatName):
     if len(sLines) != 2:
@@ -33,7 +33,7 @@
     return sum(k == "-" for k, v in groupby(row))
 
 def alignmentRowsFromColumns(columns):
-    return imap(''.join, izip(*columns))
+    return map(''.join, zip(*columns))
 
 def symbolSize(symbol, letterSize):
     if symbol == "\\": return 1
@@ -53,7 +53,7 @@
         if k:
             yield str(sum(1 for i in v))
         else:
-            yield ":".join(imap(insertSizeText,
+            yield ":".join(map(insertSizeText,
                                 alignmentRowsFromColumns(v), letterSizes))
 
 ##### Routines for reading MAF format: #####
@@ -111,7 +111,7 @@
         elif line[0] == "#":
             updateEvalueParameters(opts, line)
             if opts.isKeepComments:
-                print line,
+                print(line, end=' ')
     if sLines: yield aLine, sLines, qLines, pLines
 
 def isJoinable(opts, oldMaf, newMaf):
@@ -154,7 +154,7 @@
 
     head, body = ranges[0], ranges[1:]
 
-    outWords = [str(axtCounter.next())]
+    outWords = [str(next(axtCounter))]
     outWords.extend(head[:3])
     for i in body:
         outWords.extend(i)
@@ -163,10 +163,10 @@
     if score:
         outWords.append(score)
 
-    print " ".join(outWords)
+    print(" ".join(outWords))
     for i in sLines:
-        print i[6]
-    print  # print a blank line at the end
+        print(i[6])
+    print()  # print a blank line at the end
 
 def mafConvertToAxt(opts, lines):
     for maf in mafInput(opts, lines):
@@ -193,11 +193,11 @@
 
     letterSizes = [i[3] for i in sLines]
     rows = [i[6] for i in sLines]
-    alignmentColumns = izip(*rows)
+    alignmentColumns = zip(*rows)
     gapWord = ",".join(matchAndInsertSizes(alignmentColumns, letterSizes))
     outWords.append(gapWord)
 
-    print "\t".join(outWords + endWords)
+    print("\t".join(outWords + endWords))
 
 def mafConvertToTab(opts, lines):
     for maf in mafInput(opts, lines):
@@ -219,7 +219,7 @@
         letterSizeB, begB, endB, rowB = fieldsB[3:7]
 
         size = 0
-        for x, y in izip(rowA.upper(), rowB.upper()):
+        for x, y in zip(rowA.upper(), rowB.upper()):
             if x == "-":
                 if size:
                     yield size, begA, begB
@@ -300,14 +300,14 @@
         raise Exception("for non-translated PSL, the 1st strand in each alignment must be +")
 
     blockCount = len(blocks)
-    blockSizes, blockStartsA, blockStartsB = map(pslCommaString, zip(*blocks))
+    blockSizes, blockStartsA, blockStartsB = list(map(pslCommaString, list(zip(*blocks))))
 
     outWords = (matches, mismatches, repMatches, nCount,
                 numInsertB, baseInsertB, numInsertA, baseInsertA, strand,
                 seqNameB, seqLenB, begB, endB, seqNameA, seqLenA, begA, endA,
                 blockCount, blockSizes, blockStartsB, blockStartsA)
 
-    print "\t".join(map(str, outWords))
+    print("\t".join(map(str, outWords)))
 
 def mafConvertToPsl(opts, lines):
     if opts.join:
@@ -357,12 +357,12 @@
             break
 
 def writeSamHeader(opts, fileNames):
-    print "@HD\tVN:1.3\tSO:unsorted"
+    print("@HD\tVN:1.3\tSO:unsorted")
 
     if opts.dictionary:
         sequenceLengths = dict(readSequenceLengths(fileNames))
         for k in sorted(sequenceLengths, key=karyotypicSortKey):
-            print "@SQ\tSN:%s\tLN:%s" % (k, sequenceLengths[k])
+            print("@SQ\tSN:%s\tLN:%s" % (k, sequenceLengths[k]))
 
     if opts.dictfile:
         if opts.dictfile == "-":
@@ -372,7 +372,7 @@
                 copyDictFile(f)
 
     if opts.readgroup:
-        print "@RG\t" + "\t".join(opts.readgroup.split())
+        print("@RG\t" + "\t".join(opts.readgroup.split()))
 
 mapqMissing = "255"
 mapqMaximum = "254"
@@ -450,7 +450,7 @@
 
     pos = str(begA + 1)  # convert to 1-based coordinate
 
-    alignmentColumns = zip(rowA.upper(), rowB.upper())
+    alignmentColumns = list(zip(rowA.upper(), rowB.upper()))
 
     revBegB = seqLenB - endB
     cigar = "".join(cigarParts(begB, iter(alignmentColumns), revBegB))
@@ -461,7 +461,7 @@
     if qLines:
         qFields = qLines[-1].split()
         if qFields[1] == seqNameB:
-            qual = ''.join(j for i, j in izip(rowB, qFields[2]) if i != "-")
+            qual = ''.join(j for i, j in zip(rowB, qFields[2]) if i != "-")
 
     # It's hard to get all the pair info, so this is very
     # incomplete, but hopefully good enough.
@@ -487,7 +487,7 @@
     if score: out.append(score)
     if evalue: out.append(evalue)
     if readGroup: out.append(readGroup)
-    print "\t".join(out)
+    print("\t".join(out))
 
 def mafConvertToSam(opts, lines):
     readGroup = ""
@@ -536,9 +536,9 @@
     coords = [i[4] for i in sLines]
     for chunkCols in chunker(alignmentColumns, lineSize):
         chunkRows = list(alignmentRowsFromColumns(chunkCols))
-        begs = map(blastBegCoordinate, coords, strands, seqLens)
-        coords = map(nextCoordinate, coords, chunkRows, letterSizes)
-        ends = map(blastEndCoordinate, coords, strands, seqLens)
+        begs = list(map(blastBegCoordinate, coords, strands, seqLens))
+        coords = list(map(nextCoordinate, coords, chunkRows, letterSizes))
+        ends = list(map(blastEndCoordinate, coords, strands, seqLens))
         yield chunkCols, chunkRows, begs, ends
 
 def writeBlast(opts, maf, oldQueryName):
@@ -548,13 +548,13 @@
     seqNameB, seqLenB, strandB, letterSizeB, begB, endB, rowB = fieldsB
 
     if seqNameB != oldQueryName:
-        print "Query= " + seqNameB
-        print "         (%s letters)" % seqLenB
-        print
-
-    print ">" + seqNameA
-    print "          Length = %s" % seqLenA
-    print
+        print("Query= " + seqNameB)
+        print("         (%s letters)" % seqLenB)
+        print()
+
+    print(">" + seqNameA)
+    print("          Length = %s" % seqLenA)
+    print()
 
     score, evalue = scoreAndEvalue(aLine)
 
@@ -567,9 +567,9 @@
     if evalue:
         scoreLine += ", Expect = %s" % evalue
 
-    print scoreLine
-
-    alignmentColumns = zip(rowA, rowB)
+    print(scoreLine)
+
+    alignmentColumns = list(zip(rowA, rowB))
 
     alnSize = len(alignmentColumns)
     matches = sum(x.upper() == y.upper() for x, y in alignmentColumns)
@@ -579,19 +579,19 @@
     if gaps:
         gapPercent = 100 * gaps // alnSize  # round down, like BLAST
         identLine += ", Gaps = %s/%s (%s%%)" % (gaps, alnSize, gapPercent)
-    print identLine
-
-    print " Strand = %s / %s" % (strandText(strandB), strandText(strandA))
-    print
+    print(identLine)
+
+    print(" Strand = %s / %s" % (strandText(strandB), strandText(strandA)))
+    print()
 
     for chunk in blastChunker(sLines, opts.linesize, alignmentColumns):
         cols, rows, begs, ends = chunk
         begWidth = maxlen(begs)
         matchSymbols = ''.join(map(pairwiseMatchSymbol, cols))
-        print "Query: %-*s %s %s" % (begWidth, begs[1], rows[1], ends[1])
-        print "       %-*s %s"    % (begWidth, " ", matchSymbols)
-        print "Sbjct: %-*s %s %s" % (begWidth, begs[0], rows[0], ends[0])
-        print
+        print("Query: %-*s %s %s" % (begWidth, begs[1], rows[1], ends[1]))
+        print("       %-*s %s"    % (begWidth, " ", matchSymbols))
+        print("Sbjct: %-*s %s %s" % (begWidth, begs[0], rows[0], ends[0]))
+        print()
 
 def mafConvertToBlast(opts, lines):
     oldQueryName = ""
@@ -615,7 +615,7 @@
     seqNameA, begA, endA, rowA = blastDataFromMafFields(fieldsA)
     seqNameB, begB, endB, rowB = blastDataFromMafFields(fieldsB)
 
-    alignmentColumns = zip(rowA, rowB)
+    alignmentColumns = list(zip(rowA, rowB))
     alnSize = len(alignmentColumns)
     matches = sum(x == y for x, y in alignmentColumns)
     matchPercent = "%.2f" % (100.0 * matches / alnSize)
@@ -632,7 +632,7 @@
             bitScore = opts.bitScoreA * float(score) - opts.bitScoreB
             out.append("%.3g" % bitScore)
 
-    print "\t".join(out)
+    print("\t".join(out))
 
 def mafConvertToBlastTab(opts, lines):
     for maf in mafInput(opts, lines):
@@ -641,7 +641,7 @@
 ##### Routines for converting to HTML format: #####
 
 def writeHtmlHeader():
-    print '''
+    print('''
 <!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01//EN"
  "http://www.w3.org/TR/html4/strict.dtd">
 <html lang="en"><head>
@@ -668,7 +668,7 @@
 <pre class="key"><span class="e">  </span> prob &gt; 0.5  </pre>
 <pre class="key"><span class="f">  </span> prob &le; 0.5  </pre>
 </div>
-'''
+''')
 
 def probabilityClass(probabilityColumn):
     p = ord(min(probabilityColumn)) - 33
@@ -706,21 +706,21 @@
         scoreLine += " score=" + score
         if evalue:
             scoreLine += ", expect=" + evalue
-    print "<h3>%s:</h3>" % scoreLine
+    print("<h3>%s:</h3>" % scoreLine)
 
     if pLines:
         probRows = [i.split()[1] for i in pLines]
-        probCols = izip(*probRows)
-        classes = imap(probabilityClass, probCols)
+        probCols = zip(*probRows)
+        classes = map(probabilityClass, probCols)
     else:
         classes = repeat(None)
 
     seqNames = [i[0] for i in sLines]
     nameWidth = maxlen(seqNames)
     rows = [i[6] for i in sLines]
-    alignmentColumns = zip(*rows)
-
-    print '<pre>'
+    alignmentColumns = list(zip(*rows))
+
+    print('<pre>')
     for chunk in blastChunker(sLines, opts.linesize, alignmentColumns):
         cols, rows, begs, ends = chunk
         begWidth = maxlen(begs)
@@ -732,10 +732,10 @@
             spans = [htmlSpan(r, i) for i in classRuns]
             spans = ''.join(spans)
             formatParams = nameWidth, n, begWidth, b, spans, endWidth, e
-            print '%-*s %*s %s %*s' % formatParams
-        print ' ' * nameWidth, ' ' * begWidth, matchSymbols
-        print
-    print '</pre>'
+            print('%-*s %*s %s %*s' % formatParams)
+        print(' ' * nameWidth, ' ' * begWidth, matchSymbols)
+        print()
+    print('</pre>')
 
 def mafConvertToHtml(opts, lines):
     for maf in mafInput(opts, lines):
@@ -792,7 +792,7 @@
 
     if not opts.noheader:
         if isFormat(formatName, "html"):
-            print "</body></html>"
+            print("</body></html>")
 
 if __name__ == "__main__":
     signal.signal(signal.SIGPIPE, signal.SIG_DFL)  # avoid silly error message
@@ -833,6 +833,6 @@
 
     try: mafConvert(opts, args)
     except KeyboardInterrupt: pass  # avoid silly error message
-    except Exception, e:
+    except Exception as e:
         prog = os.path.basename(sys.argv[0])
         sys.exit(prog + ": error: " + str(e))
